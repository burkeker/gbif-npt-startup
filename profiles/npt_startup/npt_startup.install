<?php
/**
 * @file
 * Installation code for NPT Startup.
 */

/**
 * Implements hoot_install().
 */
function npt_startup_install() {
  npt_startup_install_chosen();
}

function npt_startup_install_chosen() {
  variable_set('chosen_minimum_width', 250);
  variable_set('chosen_jquery_selector', 'select:visible, form-item-node-uuid select');
  variable_set('chosen_search_contains', TRUE);
}

/**
 * Implements hook_install_tasks()
 */
function npt_startup_install_tasks(&$install_state) {

  // Remove any status messages that might have been set. They are unneeded.
  drupal_get_messages('status', TRUE);

  $tasks = array(
    'npt_startup_settings' => array(
      'display_name' => st('NPT Startup settings'),
      'type' => 'form',
    ),
  );
  return $tasks;
}

/**
 * Implements hook_install_tasks_alter().
 */
function npt_startup_install_tasks_alter(&$tasks, $install_state) {
  $tasks['install_select_profile']['display'] = FALSE;
  $tasks['install_select_locale']['display'] = FALSE;
  $tasks['install_select_locale']['run'] = INSTALL_TASK_SKIP;

  // The "Welcome" screen needs to come after the first two steps
  // (profile and language selection), despite the fact that they are disabled.
  $new_task['install_welcome'] = array(
    'display' => TRUE,
    'display_name' => st('Welcome'),
    'type' => 'form',
    'run' => isset($install_state['parameters']['welcome']) ? INSTALL_TASK_SKIP : INSTALL_TASK_RUN_IF_REACHED,
  );
  $old_tasks = $tasks;
  $tasks = array_slice($old_tasks, 0, 2) + $new_task + array_slice($old_tasks, 2);

  // Set the installation theme.
  _npt_startup_set_theme('npt_admin');
}

/**
 * Force-set a theme at any point during the execution of the request.
 *
 * Drupal doesn't give us the option to set the theme during the installation
 * process and forces enable the maintenance theme too early in the request
 * for us to modify it in a clean way.
 */
function _npt_startup_set_theme($target_theme) {
  if ($GLOBALS['theme'] != $target_theme) {
    unset($GLOBALS['theme']);

    drupal_static_reset();
    $GLOBALS['conf']['maintenance_theme'] = $target_theme;
    _drupal_maintenance_theme();
  }
}

/**
 * Task callback: shows the welcome screen.
 */
function install_welcome($form, &$form_state, &$install_state) {
  drupal_set_title(st('Nodes Portal Toolkit Startup'));
  $message = '<p>' . st('Thank you for choosing Nodes Portal Toolkit Startup, a product that sets up biodiversity web presence for GBIF Participants.') . '</p>';
  $eula = '<p>' . st('While we strive to make this product as stable, feature-rich as possible, just like any other software development in the biodiversity informatics community, we  need your understanding and active contribution to allow a product like this to serve your need. Here are some points we would like to highlight:') . '</p>';
  $items = array();
  $items[] = st('NPT Startup targets GBIF Nodes that have limited web presence, against which the current processing capacity is specified. We need your contribution to enhance it if you demand better performance for some features you like;');
  $scratchpads_link = l("Scratchpads", "http://scratchpads.eu", array('attributes' => array('target' => '_blank')));
  $scratchpadswiki_link = l("Scratchpads Documentation Wiki", "http://help.scratchpads.eu/w/Main_Page", array('attributes' => array('target' => '_blank')));
  $nptwiki_link = l("NPT Startup Documentation Wiki", "https://github.com/gbif/gbif-npt-startup/wiki", array('attributes' => array('target' => '_blank')));
  $items[] = st("NPT Startup is based on !scratchpads, from which are many biodiversity content management features in NPT Startup. Please checkout !scratchpadswiki for generic usage guides. For NPT Startup specific usage, please checkout !wiki;", array('!scratchpads' => $scratchpads_link, '!scratchpadswiki' => $scratchpadswiki_link, '!wiki' => $nptwiki_link));
  $items[] = st('NPT Startup is built by using Drupal/PHP with components written in other languages nicely integrated, i.e. Apache Solr for indexing. GBIF promotes reusable software components, therefore we are keen to integrate your new developements that provide APIs. This will benefit all users of NPT Startup. Please express your interest by writing to nodes@gbif.org;');
  $eula .= theme('item_list', array('items' => $items));
  $nptgroup_link = l('the NPT discussion group', 'http://community.gbif.org/pg/groups/3507/nodes-portal-toolkit-npt/', array('attributes' => array('target' => '_blank')));
  $nptcode_link = l('the source code', 'https://github.com/gbif/gbif-npt-startup', array('attributes' => array('target' => '_blank')));
  $eula .= '<p>' . st('That is it for the main points. We would like to encourage you to initiate discussions around portal development on !nptgroup. We are also looking forward to your contribution to !code, as issue reports, bug fixes, or new exciting features.', array('!nptgroup' => $nptgroup_link, '!code' => $nptcode_link)) . '</p>';
  $eula .= '<p>' . st('Thank you again for choosing NPT Startup to start developing your biodiversity information portal!') . '</p>';
  $form = array();
  $form['welcome_message'] = array(
    '#markup' => $message,
  );
  $form['eula'] = array(
    '#prefix' => '<div id="eula-installation-welcome">',
    '#markup' => $eula,
  );
  $form['eula-accept'] = array(
    '#title' => st('I understand.'),
    '#type' => 'checkbox',
    '#suffix' => '</div>',
  );
  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st("Let's Get Started!"),
    '#states' => array(
      'disabled' => array(
        ':input[name="eula-accept"]' => array('checked' => FALSE),
      ),
    ),
    '#weight' => 10,
  );
  return $form;
}

function install_welcome_submit($form, &$form_state) {
  global $install_state;

  $install_state['parameters']['welcome'] = 'done';
  $install_state['parameters']['locale'] = 'en';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Allows the profile to alter the site configuration form.
 */
function npt_startup_form_install_configure_form_alter(&$form, $form_state){

  $form['site_information']['site_name']['#weight'] = 0;
  $form['site_information']['site_mail']['#weight'] = 10;
  $form['site_information']['site_slogan'] = array(
    '#type' => 'textfield',
    '#title' => st('Site slogan:'),
    '#description' => st('Please provide a short text that you would like to show under the site name.'),
    '#weight' => 5,
    '#required' => FALSE,
  );
  $form['#submit'][] = 'npt_startup_form_install_configure_form_submit';
}

function npt_startup_form_install_configure_form_submit(&$form, $form_state) {
  $values = $form_state['values'];
  
  // Setting site slogan
  if (isset($values['site_slogan'])) variable_set('site_slogan', $values['site_slogan']);
  
}


function npt_startup_settings($form, &$form_state, &$install_state) {
  drupal_set_title(st('NPT Startup settings'));
  drupal_add_js(drupal_get_path('profile', 'npt_startup') . '/js/listParticipants.js');

  // Prepare form.
  $form = array();
  $form['node_info'] = array(
    '#type' => 'fieldset',
    '#title' => st('Node information'),
    '#description' => st('Please provide information to indicate the GBIF node with which this site associates.'),
  );

  // Providing a drop-down list of GBIF Participant Nodes.
  $participant_type_options = _npt_startup_participant_type_options();

  $form['node_info']['participant_type'] = array(
    '#type' => 'select',
    '#title' => st('Participant type'),
    '#options' => $participant_type_options,
  );
  $form['node_info']['node_uuid'] = array(
    '#type' => 'select',
    '#title' => st('GBIF Participants'),
    '#prefix' => '<div id="participant-list-replace">',
    '#suffix' => '</div>',
    '#options' => _npt_startup_get_participant_list(),
    '#description' => st('The list is sorted by the membership status of GBIF Participant. If you cannot find your node on the list, it may be that you are not yet a GBIF member. In this case, please leave it unselected.'),
    '#required' => FALSE,
  );

  $form['node_info']['node_shortname'] = array(
    '#type' => 'textfield',
    '#title' => st('Node short name:'),
    '#required' => FALSE,
    '#description' => st('Some nodes have short names like "NLBIF", "TaiBIF". With this field provided, some menu items will use the short name.'),
  );

  // Get the centre coordinate of the country.
  if ($centre_crd = variable_get('centre_crd')) {
    $lat = $centre_crd['lat'];
    $lng = $centre_crd['lng'];
  } else {
    // Use Geonames.org API
    $countries = country_get_list();
    $site_default_country_code = variable_get('site_default_country');
    $site_default_country_name = $countries[$site_default_country_code];

    $url = "http://api.geonames.org/searchJSON?country=" . $site_default_country_code . "&name=" . $site_default_country_name . "&maxRows=1&username=nptstartup";

    $coordinate_json = json_decode(file_get_contents($url));

    $lat = $coordinate_json->geonames[0]->lat;
    $lng = $coordinate_json->geonames[0]->lng;
  }

  $form['node_location'] = array(
    '#type' => 'fieldset',
    '#title' => st('Node location'),
    '#description' => st('For mapping features in NPT Startup, by default NPT Startup will centre the map according to where your node is located. Please confirm the coordinate that NPT Startup has determined by the default country you chose from the last page. You can of course provide your own to fit your situation better.'),
  );
  $form['node_location']['node_coordinate_lat'] = array(
    '#type' => 'textfield',
    '#title' => st('Latitude:'),
    '#required' => FALSE,
    '#description' => st('Please provide the latitude.'),
    '#default_value' => (isset($lat)) ? $lat : 0,
  );
  $form['node_location']['node_coordinate_lng'] = array(
    '#type' => 'textfield',
    '#title' => st('Longitude:'),
    '#required' => FALSE,
    '#description' => st('Please provide the longitude.'),
    '#default_value' => (isset($lng)) ? $lng : 0,
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => st('Save and continue'),
    '#weight' => 15,
  );
  return $form;
}

function npt_startup_settings_validate($form, &$form_state) {
}

function npt_startup_settings_submit($form, &$form_state) {
  $values = $form_state['values'];
  
  $gbif_participant_settings = array();
  
  if (isset($values['participant_type'])) $gbif_participant_settings['participant_type'] = $values['participant_type'];
  if (isset($values['node_uuid'])) $gbif_participant_settings['node_uuid'] = $values['node_uuid'];
  if (isset($values['node_shortname'])) $gbif_participant_settings['node_shortname'] = $values['node_shortname'];

  variable_set('gbif_participant_settings', $gbif_participant_settings);

  // Setting centre coordinates
  $centre_crd = array(
      'lat' => (isset($values['node_coordinate_lat'])) ? $values['node_coordinate_lat'] : 0,
      'lng' => (isset($values['node_coordinate_lng'])) ? $values['node_coordinate_lng'] : 0,
  );
  variable_set('centre_crd', $centre_crd);
  
  module_enable(array('npt_feeds'), TRUE);
}

function _npt_startup_participant_type_options() {
  return array(
    'VOTING' => st('Voting Participants'),
    'ASSOCIATE' => st('Associate Country Participants'),
    'OTHER' => st('Other Associate Participants'),
  );
}

function _npt_startup_get_participant_list() {

  $node_types = array('voting', 'associate', 'other');
  foreach ($node_types as $node) {
    $$node = array();
  }

  // Get the list of GBIF Participant Nodes from GBIF API.
  $json_url = GBIF_REGISTRY_API_NODE . "?limit=200"; // To get all nodes at once.
  $gbif_registry_node_api_response = json_decode(file_get_contents($json_url));
  $gbif_registry_node_api_results = $gbif_registry_node_api_response->results;
  unset($gbif_registry_node_api_response);

  // Only to keep the title, type and UUID
  foreach ($gbif_registry_node_api_results as $result) {

    switch ($result->type) {
      case 'COUNTRY':
        if ($result->participationStatus == 'VOTING') {
          $voting[$result->key] = $result->title;
          asort($voting);
        } elseif ($result->participationStatus == 'ASSOCIATE') {
          $associate[$result->key] = $result->title;
          asort($associate);
        }
        break;
      case 'OTHER':
        if ($result->participationStatus <> 'FORMER') {
          $other[$result->key] = $result->title;
          asort($other);
        }
        break;
    }

  }
  $initial_list = array_merge($voting, $associate, $other);

  foreach ($node_types as $node) {
    $$node = json_decode(json_encode($$node));
  }

  drupal_add_js(array(
    'npt_startup' => array(
      'VOTING' => $voting,
      'ASSOCIATE' => $associate,
      'OTHER' => $other,
    ),
  ), 'setting');

  return $initial_list;
}