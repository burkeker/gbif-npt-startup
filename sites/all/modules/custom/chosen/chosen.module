<?php

/**
 * Implements hook_library().
 */
function chosen_library() {
  $module_path = drupal_get_path('module', 'chosen');
  // For now the Chosen library is included in the module since it had to be
  // modified for use with jQuery 1.4.
  //$library_path = module_exists('libraries') ? libraries_get_path('chosen') : 'sites/all/libraries/chosen';
  $library_path = $module_path . '/chosen';

  $info['chosen'] = array(
    'title' => 'Chosen',
    'website' => 'http://harvesthq.github.com/chosen',
    'version' => '0.10.0',
    'js' => array(
      $library_path . '/public/chosen.jquery.min.js' => array('group' => JS_LIBRARY),
    ),
    'css' => array(
      $library_path . '/public/chosen.css' => array(),
    ),
  );

  $scope = defined('MAINTENANCE_MODE') ? 'header' : 'footer';
  $info['drupal.chosen'] = array(
    'title' => 'Drupal Chosen integration',
    'website' => 'http://drupal.org/project/chosen',
    'version' => '1.0',
    'js' => array(
      $module_path . '/chosen.js' => array(),
      array(
        'data' => array(
          'chosen' => array(
            'selector' => variable_get('chosen_jquery_selector', 'select:visible'),
            'minimum' => variable_get('chosen_minimum', 20),
            'minimum_width' => variable_get('chosen_minimum_width', 200),
            'search_contains' => (variable_get('chosen_search_contains', FALSE)) ? TRUE : FALSE,
          ),
        ),
        'type' => 'setting',
      ),
    ),
    'css' => array(
      //$module_path . '/chosen.css' => array(),
    ),
    'dependencies' => array(
      array('chosen', 'chosen'),
    ),
  );

  return $info;
}

/**
 * Implements hook_element_info_alter().
 */
function chosen_element_info_alter(&$info) {
  $info['select']['#attached']['library'][] = array('chosen', 'drupal.chosen');
}

/**
 * Implements hook_field_widget_info_alter().
 */
function chosen_field_widget_info_alter(&$info) {
  $settings = array('apply_chosen' => 0);
  $info['options_select']['settings'] += $settings;
}

/**
 * Implements hook_form_alter().
 */
function chosen_form_field_ui_field_edit_form_alter(&$form, $form_state) {
  switch ($form['instance']['widget']['type']['#value']) {
    case 'options_select':
      $form['instance']['widget']['settings']['apply_chosen'] = array(
        '#type' => 'checkbox',
        '#title' => t('Apply chosen to widget'),
        '#default_value' => !empty($form['#instance']['widget']['settings']['apply_chosen']),
      );
      break;
  }
}

/**
 * Implements hook_field_widget_form_alter().
 */
function chosen_field_widget_form_alter(&$element, &$form_state, $context) {
  if (empty($context['instance']['widget']['settings']['apply_chosen'])) {
    return;
  }

  switch ($context['instance']['widget']['type']) {
    case 'options_select':
      $element['#attributes']['class'][] = 'chosen-widget';
      break;
  }
}
