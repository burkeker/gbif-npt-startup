<?php
/**
 * @file
*
* Test case for spm with selenium
*/
if(!class_exists('DrupalSeleniumWebTestCase')){
  drupal_set_message(t('Selenium tests are not displayed because the selenium module is not enabled.'), 'warning', FALSE);
  return;
}

class SpmSeleniumTestCase extends ScratchpadsTweaksSeleniumTestCase{

  public static function getInfo(){
    return array(
      'name' => 'Spm Selenium',
      'description' => 'Tests for spm module',
      'group' => 'Scratchpads Selenium',
      'browsers' => array(
        'firefox'
      )
    );
  }

  /**
   * A wrapper for the following tests
   * 
   * - Verify 'no bio term' message
   * - Create term and add taxon description 
   * - Verify change in configuration settings (remove fields from form)
   */
  function testWrapper(){
    // Login
    $this->drupalLogin($this->maintainer);
    // First test
    $this->verifyNoBioMessage();
    // Add bio vocabulary and term   
    $vocabulary = $this->createBioVocabularyWithName();
    $term = $this->createTermWithName($vocabulary, 'term1');
    // Run other tests
    $this->verifyAddSpm($vocabulary, $term);
    $this->verifyRemoveFields();
  }

  /**
   * Verify 'error' message when attempting to add a taxon description without a bio vocabulary
   */
  function verifyNoBioMessage(){
    $this->drupalGet('node/add/spm');
    $this->assertText('You must create a biological classification before you can add a taxon description.');
  }

  /**
   * A taxon description is created with all fields populated
   * A polygon will be created for the mpa field.
   * 
   * Note: Removal, or change in one of these fields will cause this test to fail.
   */
  function verifyAddSpm($vocabulary, $term){
    $this->drupalGet('node/add/spm');
    // Autocomplete taxonomy field
    if(isset($term)){
      $this->_autocompleteTest('field_taxonomic_name[und]', substr($term->name, 0, 1), $term->name . ' [' . $term->tid . ']');
    }
    $field_array = array(
      'Overview' => array(
        'text' => array(
          'field_general_description',
          'field_biology'
        )
      ),
      'Conservation' => array(
        'text' => array(
          'field_conservation_status',
          'field_legislation',
          'field_management',
          'field_procedures',
          'field_threats',
          'field_trends'
        )
      ),
      'Description' => array(
        'text' => array(
          'field_diagnostic_description',
          'field_behavious',
          'field_cytology',
          'field_genetics',
          'field_growth',
          'field_look_alikes',
          'field_molecular_biology',
          'field_morphology',
          'field_physiology',
          'field_size',
          'field_taxon_biology'
        )
      ),
      'Evolution and Systematics' => array(
        'text' => array(
          'field_evolution',
          'field_phylogeny'
        )
      ),
      'Ecology and Distribution' => array(
        'map' => array(
          'field_spm_map'
        ),
        'text' => array(
          'field_dispersal',
          'field_associations',
          'field_cyclicity',
          'field_distribution',
          'field_ecology',
          'field_habitat',
          'field_life_cycle',
          'field_life_expectancy',
          'field_migration',
          'field_trophic_strategy',
          'field_population_biology',
          'field_reproduction'
        )
      ),
      'Relevance' => array(
        'text' => array(
          'field_diseases',
          'field_risk_statement',
          'field_uses'
        )
      )
    );
    foreach($field_array as $tab => $fieldset){
      $this->clickLink($tab);
      foreach($fieldset['text'] as $field){
        $element = $this->driver->getElement('name=' . $field . '[und][0][value]');
        $element->clear();
        $value = $this->randomName();
        $element->sendKeys($value);
        // update the array with the inputed data
        $key = array_search($field, $field_array[$tab]['text']);
        unset($field_array[$tab]['text'][$key]);
        $field_array[$tab]['text'][$field] = $value;
      }
      if(isset($fieldset['map'])){
        $this->assertText('Map', 'Map field present');
        // Click on '+ Polygon'
        $polygon_link = $this->driver->getElement("xpath=//*[text()='+ Polygon']");
        $polygon_link->click();
        $this->driver->sleep(1);
        $map_elements = $this->driver->getAllElements("css=#field_spm_map div div div div div div div");
        $map_elements[0]->moveCursorCenter();
        $this->driver->mouseClick();
        $this->driver->sleep(1);
        $map_elements[1]->moveCursorCenter();
        $this->driver->mouseClick();
        $this->driver->sleep(1);
        $map_elements[2]->moveCursorCenter();
        $this->driver->mouseClick();
        $this->driver->sleep(1);
        $polygon_link->click();
        $this->driver->sleep(1);
      }
    }
    // Submit the form
    $this->driver->getElement("id=edit-submit")->click();
    $this->assertText("Taxon Description " . $term->name . " (" . $vocabulary->name . ") has been created.", "Taxon description successfully created");
    // Assert that values have been saved
    foreach($field_array as $tab => $fieldset){
      if(isset($fieldset['map'])){
        // We can verify that some data has been saved, but cannot verify the precise functionality of the map.
        $this->assertText('Map', 'Map field present on node page');
      }
      foreach($fieldset['text'] as $field => $data){
        $this->assertText($data, $field . ' data saved and displayed on node page');
      }
    }
    $this->assertText($term->name, 'Term name displayed on node page');
  }

  /**
   * Verify that you can remove fields from the taxon descriptions form 
   * using the configuration form
   */
  function verifyRemoveFields(){
    $fields_to_remove = array(
      'Overview' => array(
        'field_biology' => 'Biology'
      ),
      'Conservation' => array(
        'field_management' => 'Management'
      ),
      'Description' => array(
        'field_genetics' => 'Genetics'
      )
    );
    $this->drupalGet('admin/config');
    $this->clickLink('Taxon description editor settings');
    foreach($fields_to_remove as $field_group => $fields){
      foreach($fields as $machine_name => $human_name){
        $this->driver->getElement("xpath=//*[text()='" . $human_name . " ']")->click();
      }
    }
    // Submit the form
    $this->driver->getElement("id=edit-submit")->click();
    $this->assertText('The configuration options have been saved.');
    $this->drupalGet('node/add/spm');
    foreach($fields_to_remove as $field_group => $fields){
      // Click the tab
      $this->clickLink($field_group);
      foreach($fields as $machine_name => $human_name){
        $this->assertNoText($human_name, $human_name . ' successfully removed from taxon description form');
      }
    }
  }
}
