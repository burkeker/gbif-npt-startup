<?php

/**
 * @file
*
* Scratchpads darwincore tests.
*/
class DarwincoreTestCase extends ScratchpadsTweaksTestCase{

  protected $admin_user;

  protected $test_user;

  public static function getInfo(){
    return array(
      'name' => 'Darwincore',
      'description' => "Tests the Specimen/Observation and Location content types",
      'group' => 'Scratchpads'
    );
  }

  /**
   * Enable modules and create users with specific permissions.
   */
  public function setUp(){
    $modules[] = 'darwincore';
    parent::setUp($modules);
    //  Create users.
    $this->admin_user = $this->drupalCreateUser(array(
      'access content',
      'access administration pages',
      'administer site configuration',
      'administer users',
      'administer permissions',
      'administer content types',
      'administer nodes',
      'bypass node access',
      'access overlay',
      'access content overview',
      'view the administration theme',
      'access all views',
      'administer comments'
    ));
    $this->test_user = $this->drupalCreateUser(array(
      'access content'
    ));
    // We set the legal_accepted on the user so that login passes.
    parent::scratchpads_tweaks_legal_save($this->admin_user->uid);
    parent::scratchpads_tweaks_legal_save($this->test_user->uid);
  }

  /**
   * Wrapper for other tests to speed up test run
   */
  function testWrapper(){
    $this->drupalLogin($this->admin_user);
    $this->validateRequiredFields();
    $this->validateDefaultFields();
    $this->validateFieldsGroups();
    $this->validateCreateSpecimenObservation();
    $this->validateCreateLocation();
    $this->validateGenBankNumbers();
  }

  /**
   * Test the presence of the required fields.
   */
  function validateRequiredFields(){
    // specimen-observation
    $this->drupalGet('admin/structure/types/manage/specimen-observation/fields');
    $required_fields_array_spm = array(
      'title',
      'field_basis_of_record',
      'field_institution_code',
      'field_collection_code',
      'field_catalogue_number'
    );
    foreach($required_fields_array_spm as $required_field){
      $this->assertText($required_field, "Required Field: '" . $required_field . "' present on spm manage fields page");
    }
    // location
    $this->drupalGet('admin/structure/types/manage/location/fields');
    $required_fields_array_location = array(
      'title'
    );
    foreach($required_fields_array_location as $required_field){
      $this->assertText($required_field, "Required Field: '" . $required_field . "' present on location manage fields page");
    }
  }

  /**
   * Test the presence of default fields
   * (note: required fields are tested with validateRequiredFields())
   */
  function validateDefaultFields(){
    // specimen-observation
    $this->drupalGet('admin/structure/types/manage/specimen-observation/fields');
    $default_fields_array_spm = array(
      'field_taxonomic_name',
      'field_type_status',
      'field_identification_qualifier',
      'field_identified_by',
      'field_date_identified',
      'field_collector_number',
      'field_number',
      'field_collector',
      'field_date_collected',
      'field_notes',
      'field_media',
      'field_sex',
      'field_lifestage',
      'field_count',
      'field_genbank_number',
      'field_other_catalogue_numbers',
      'field_remarks',
      'field_location'
    );
    foreach($default_fields_array_spm as $default_field){
      $this->assertText($default_field, "Default Field: '" . $default_field . "' present on spm manage fields page");
    }
    // location ...
    $this->drupalGet('admin/structure/types/manage/location/fields');
    $default_fields_array_location = array(
      'field_map',
      'field_continent_or_ocean',
      'field_country',
      'field_island',
      'field_island_group',
      'field_state_province',
      'field_county',
      'field_locality',
      'field_coordinate_uncertainty',
      'field_geodetic_datum',
      'field_coordinate_system',
      'field_georeference_protocol',
      'field_georeference_remarks',
      'field_max_elevation',
      'field_min_elevation',
      'field_min_depth',
      'field_max_depth'
    );
    foreach($default_fields_array_location as $default_field){
      $this->assertText($default_field, "Default Field: '" . $default_field . "' present on location manage fields page");
    }
  }

  /**
   * Test the presence of field groups.
   */
  function validateFieldsGroups(){
    // specimen-observation
    $this->drupalGet('admin/structure/types/manage/specimen-observation/fields');
    $field_group_array = array(
      'group_required',
      'group_taxonomy',
      'group_collection',
      'group_miscellaneous',
      'group_location'
    );
    foreach($field_group_array as $field_group){
      $this->assertText($field_group, "Field Group: '" . $field_group . "' present on spm manage fields page");
    }
    // location
    $this->drupalGet('admin/structure/types/manage/location/fields');
    $field_group_array = array(
      'group_tabs',
      'group_map',
      'group_extra_fields'
    );
    foreach($field_group_array as $field_group){
      $this->assertText($field_group, "Field Group: '" . $field_group . "' present on location manage fields page");
    }
  }

  /**
   *  Test the creation of a specimen-observation and test for uniqueness
   */
  function validateCreateSpecimenObservation(){
    $this->drupalGet('node/add/specimen-observation');
    // Create a node
    $edit = array();
    $edit['field_basis_of_record[und]'] = 'Fossil Specimen';
    $institution_code = $this->machine_name($this->randomName());
    $collection_code = $this->machine_name($this->randomName());
    $catalogue_number = $this->machine_name($this->randomName());
    $edit['field_institution_code[und][0][value]'] = $institution_code;
    $edit['field_collection_code[und][0][value]'] = $collection_code;
    $edit['field_catalogue_number[und][0][value]'] = $catalogue_number;
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText('Specimen/Observation ' . $institution_code . ' - ' . $collection_code . ' - ' . $catalogue_number . ' has been created.', 'Specimen/Observation successfully created');   
    // Edit the node
    $this->clickLink('Edit');
    $edit2 = array();
    $new_catalogue_number = $this->machine_name($this->randomName());
    $edit['field_catalogue_number[und][0][value]'] = $new_catalogue_number;
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText('Specimen/Observation ' . $institution_code . ' - ' . $collection_code . ' - ' . $new_catalogue_number . ' has been updated.', 'Specimen/Observation successfully updated');    
    
    // attempt to create another identical record - should give an error messsage
    $this->drupalPost('node/add/specimen-observation', $edit, t('Save'));
    $this->assertText(t('The "Institution code/Collection code/Catalogue number" combination is not unique.'), 'Error message displayed on duplicate entry');
  }
  
  /**
   * Test that a specimen-obervation can be edited
   */
  function validateEditSpecimenObservation(){
    
  }
  
  /**
   * Test that a specimen-observation can be deleted
   */
  function validateDeleteSpecimenObservation(){
  
  }

  /**
   *  Test the creation of a location and test for uniqueness (title)
   */
  function validateCreateLocation(){
    $this->drupalGet('node/add/location');
    $edit = array();
    $title = $this->machine_name($this->randomName());
    $edit['title'] = $title;
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertText('Location ' . $title . ' has been created.', 'Location successfully created');
    // attempt to create another record with the same title - should give an error message
    $this->drupalPost('node/add/location', $edit, t('Save'));
    $this->assertText(t('The title field for a location must be unique.'), 'Error message displayed on duplicate title');
  }

  /**
   * Tests that entering csv numbers creates genbank links
   */
  function validateGenBankNumbers(){
    // create a specimen and enter genbank numbers
    $this->drupalGet('node/add/specimen-observation');
    $edit = array();
    $edit['field_basis_of_record[und]'] = 'Fossil Specimen';
    $institution_code = $this->machine_name($this->randomName());
    $collection_code = $this->machine_name($this->randomName());
    $catalogue_number = $this->machine_name($this->randomName());
    $edit['field_institution_code[und][0][value]'] = $institution_code;
    $edit['field_collection_code[und][0][value]'] = $collection_code;
    $edit['field_catalogue_number[und][0][value]'] = $catalogue_number;
    // genbank numbers
    $g1 = $this->machine_name($this->randomName(8));
    $g2 = $this->machine_name($this->randomName(8));
    $genbank_numbers = $g1 . ', ' . $g2;
    $edit['field_genbank_number[und][0][value]'] = $genbank_numbers;
    $this->drupalPost(NULL, $edit, 'Save');
    $this->assertText('Specimen/Observation ' . $institution_code . ' - ' . $collection_code . ' - ' . $catalogue_number . ' has been created.', 'Specimen/Observation successfully created');
    // validate links...
    $this->assertLink($g1);
    $this->assertLink($g2);
    $href1 = "http://www.ncbi.nlm.nih.gov/nuccore/" . $g1;
    $href2 = "http://www.ncbi.nlm.nih.gov/nuccore/" . $g2;
    $this->assertLinkByHref($href1);
    $this->assertLinkByHref($href2);
  }
}
  