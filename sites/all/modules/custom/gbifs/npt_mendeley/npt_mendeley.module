<?php
/**
 * @file
 * This module retrieves relevant literature entries about a node from Mendeley API.
 */

define('NPT_MENDELEY_CONSUMER_KEY', '6d775b71aef1d3e93dbfabbd2653bfe1051e3ddaf');
define('MENDELEY_DOC_DETAIL_URL', 'http://api.mendeley.com/oapi/documents/details/');
define('GBRDS_AGENT_URL', 'http://gbrds.gbif.org/browse/agent?uuid=');

/**
 * Implements hook_menu().
 */
function npt_mendeley_menu() {
  $items = array();
  $items['admin/config/npt/mendeley_settings'] = array(
    'title' => t('Mendeley API'),
    'description' => t('Settings for accessing GBIF public library on Mendeley and updating statistics.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('npt_mendeley_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'npt_mendeley.admin.inc',
  );
  $items['npt_mendeley/retrieval_progress'] = array(
    'page callback' => '_npt_mendeley_retrievel_progress',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  );
  $items['mendeley_progress'] = array(
    'title' => t('Mendeley progress'),
    'description' => t('Progressbar.'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('_npt_mendeley_progres'),
    'access arguments' => array('access content'),
    'access callback' => TRUE,
  );
  return $items;
}

function _npt_mendeley_progres() {
  global $base_url;

  drupal_add_library('system', 'ui.progressbar');
  drupal_add_js(drupal_get_path('module', 'npt_mendeley') . '/js/d7dg_progress.js');

  $progress_path = $base_url . '/npt_mendeley/retrieval_progress';
  drupal_add_js(array('progress_path' => $progress_path), 'setting');

  $form['npt_mendeley']['progress'] = array(
    '#type' => 'submit',
    '#value' => t('Update now'),
    '#prefix' => '<div id="update-div"><div id="progressbar"><div class="progressbar-label"></div></div></div>',
    '#suffix' => '</div>',
    //'#submit' => array('npt_mendeley_retrieve'),
  );

  return $form;
}

/**
 * Implements hook_library().
 */
function npt_mendeley_library() {
  $libraries['progress'] = array(
    'title' => 'progress bar for Mendeley retrievel',
    'js' => array(
      drupal_get_path('module', 'npt_mendeley') . '/js/progress.js' => array(
        'type' => 'file',
        'scope' => 'footer',
        'weight' => 20,
      ),
    ),
    'css' => array(
      drupal_get_path('module', 'npt_mendeley') . '/css/progress.css' => array(
        'type' => 'file',
        'media' => 'all',
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_block_info().
 */
function npt_mendeley_block_info() {
  $blocks['npt_mendeley'] = array(
    'info' => t("Peer-reviewed publications using/discussing GBIF-mediated data"),
    'region' => 'content',
    'weight' => 1,
    'theme' => NPTSTARTUP_THEME,
    'status' => 0,
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function npt_mendeley_block_view($delta = '') {
  $block = array();
  switch ($delta) {
    case 'npt_mendeley':
      // Get entries from local documents.json
      // Prepare the block content
      $block_content = '<article>';
      
      $analysed_result = variable_get('npt_memdeley_publication');
      $analysed_result_count = $analysed_result['authored']['count'] + $analysed_result['about']['count'];

      if ($analysed_result_count > 0) {
        $block_content .= '<h4>' . t('Professional publication') . '</h4>';
        $block_content .= '<h5>' . t('Peer-reviewed publications using or discussing GBIF-mediated data') . '</h5>';

        if ($analysed_result['authored']['count'] > 0) {
          $block_content .= '<p>';
          $output = format_plural($analysed_result['authored']['count'],
            'There is 1 publication authored by scientists from @country:',
            'There are @count publications authored by scientists from @country:',
            array('@country' => $country)
          );
          $output .= '<ol class="mendeley-citation">';

          $authored_docs = json_decode(file_get_contents(file_build_uri('npt_memdeley/' . $analysed_result['authored']['file'])));

          foreach ($authored_docs as $adoc) {
            $output .= '<li>';

            // author
            for ($i = 0; $i < count($adoc->authors); $i++) {
              $output .= $adoc->authors[$i]->surname . ', ' . substr($adoc->authors[$i]->forename, 0, 1) . '.';
              $output .= ', ';          
            }
            // year 
            $output .= $adoc->year . '. ';
            $output .= $adoc->title . '. ';
            $output .= '<em>' . $adoc->publication_outlet . '</em>, ';
            $output .= $adoc->volume;
            $output .= '(' . $adoc->issue . '), ';
            $output .= 'p.' . $adoc->pages . '. ';
            $output .= 'Available at: ';
            $output .= l($adoc->url, $adoc->url) . '.';

            $output .= '</li>';
          }
          $output .= '</ol>';
          $block_content .= $output;
          $output = '';
          $block_content .= '</p>';
        }

        if ($analysed_result['about']['count'] > 0) {
          $block_content .= '<p>';
          $output = format_plural($analysed_result['about']['count'],
            'There is 1 publication about biodiversity in @country:',
            'There are @count publications about biodiversity in @country:',
            array('@country' => $country)
          );
          $output .= '<ol class="mendeley-citation">';

          $authored_docs = json_decode(file_get_contents(file_build_uri('npt_memdeley/' . $analysed_result['about']['file'])));

          foreach ($authored_docs as $adoc) {
            $output .= '<li>';

            // author
            for ($i = 0; $i < count($adoc->authors); $i++) {
              $output .= $adoc->authors[$i]->surname . ', ' . substr($adoc->authors[$i]->forename, 0, 1) . '.';
              $output .= ', ';          
            }
            // year 
            $output .= (isset($adoc->year)) ? $adoc->year . '. ' : '';
            $output .= (isset($adoc->title)) ? $adoc->title . '. ' : '';
            $output .= '<em>' . $adoc->publication_outlet . '</em>, ';
            $output .= (isset($adoc->volume)) ? $adoc->volume : '';
            $output .= (isset($adoc->issue)) ? '(' . $adoc->issue . '), ' : '';
            $output .= (isset($adoc->pages)) ? 'p.' . $adoc->pages . '. ' : '';
            $output .= 'Available at: ';
            $output .= l($adoc->url, $adoc->url) . '.';

            $output .= '</li>';
          }
          $output .= '</ol>';
          $block_content .= $output;
          $output = '';
          $block_content .= '</p>';
        }

        $block_content .= '<p>(' . t('Depending on how it is categorised, an article may be listed twice.') . ')</p>';
        $block_content .= '</article>';
      }
      $block['content'] = array(
        '#markup' => $block_content,
      );
      break;
  }
}

/**
 * Ensure a local digest of citations from the GBIF Public Library on Mendeley.
 */
function npt_mendeley_retrieve() {

  // Begin accessing Mendeley API.
  $mendeley_gbif_url = 'http://api.mendeley.com/oapi/documents/groups/1068301/docs/?details=true&items=40&consumer_key='. NPT_MENDELEY_CONSUMER_KEY;
  $mendeley_curl = curl_init();
  curl_setopt($mendeley_curl, CURLOPT_URL, $mendeley_gbif_url);
  curl_setopt($mendeley_curl, CURLOPT_RETURNTRANSFER, true);
  curl_setopt($mendeley_curl, CURLOPT_HEADER, true);
  $mendeley_curl_result = curl_exec($mendeley_curl);
  curl_close($mendeley_curl);
  
  $essential = _npt_mendeley_get_essential($mendeley_curl_result);
  
  $mendeley_result = $essential['documents'];
  $mendeley_ratelimit_remaining = $essential['ratelimit_remaining'];
  $total_results = $essential['total_results'];
  $total_pages = $essential['total_pages'];

  unset($essential);

  // Prepare for uri
  $documents_file = 'npt_mendeley/documents.json';
  $documents_file_loc = file_build_uri($documents_file);
  $documents_file_path = drupal_realpath($documents_file_loc);
  $documents_exist = file_exists($documents_file_loc);
  $documents_time = filemtime($documents_file_path);
  $time = time();
  $documents_age = $time - $documents_time;

  // If documents are already retrieved and the local copy is only 6 hrs old,
  // then use the local copy. Otherwise retrieve and update again.
  if ($documents_exist == TRUE && $documents_age < 21600) {
    $gbif_documents_content = file_get_contents($documents_file_loc);
    $gbif_documents = json_decode($gbif_documents_content);

    drupal_set_message(t('The local copy of retrieved documents is used.'));
    return TRUE;

  } elseif ($documents_exist == FALSE || $documents_age >= 21600) {

    // If there is no document retrieved or the local copy is older than 6 hrs,
    // then retrieve all documents into one array
    drupal_set_message(t('@results documents in @pages pages to be retrieved from GBIF Public Library.', array('@results' => $total_results, '@pages' => $total_pages)));
    
    $mendeley_ratelimit_remaining = 0;
    $url_to_retrieve = array();
    $mendeley_gbif_documents = array();
    $progress = array(
      'total_pages' => $total_pages,
      'page_retrieved' => 0,
      'total_documents' => $total_results,
      'documents_retrieved' => 0,
      'timestamp' => 0,
      'ratelimit_remaining' => 0,
    );
    
    // All urls to be retrieved.
    for ($i = 0; $i < $total_pages; $i++) {
      $url_to_retrieve[] = $mendeley_gbif_url . '&page=' . $i;
    }

    $url_count = count($url_to_retrieve);
    $mendeley_curl = array();
    $master_curl = curl_multi_init();
    
    // Construct curl handlers
    for ($i = 0; $i < $url_count; $i++) {
      $mendeley_curl[$i] = curl_init($url_to_retrieve[$i]);
      curl_setopt($mendeley_curl[$i], CURLOPT_RETURNTRANSFER, true);
      curl_setopt($mendeley_curl[$i], CURLOPT_HEADER, true);
      curl_multi_add_handle($master_curl, $mendeley_curl[$i]);
    }

    do {
      curl_multi_exec($master_curl, $running);
    } while ($running > 0);
    
    // Push results together
    for ($i = 0; $i < $url_count; $i++) {
      $curl_result = curl_multi_getcontent($mendeley_curl[$i]);
      $essential = _npt_mendeley_get_essential($curl_result);
      
      $mendeley_gbif_documents = array_merge($mendeley_gbif_documents, $essential['documents']);

      // Update progress
      $mendeley_ratelimit_remaining = $essential['ratelimit_remaining'];
      $progress['page_retrieved'] = $i + 1;
      $progress['documents_retrieved'] = count($mendeley_gbif_documents);
      $progress['timestamp'] = time();
      $progress['ratelimit_remaining'] = $essential['ratelimit_remaining'];
      variable_set('npt_mendeley_retrieval_progress', $progress);
    }

    curl_multi_close($master_curl);

    // Save a local copy for use when there is no network connection or the rate is exceeded for Mendeley API.
    $json_file = json_encode($mendeley_gbif_documents);
    $file_save_success = file_save_data($json_file, $documents_file_loc, FILE_EXISTS_REPLACE);
    
    if (is_object($file_save_success)) {
      drupal_set_message(t('Mendeley documents retrieved and saved.'));
      return TRUE;
    } else {
      drupal_set_message(t('Mendeley documents are not successfully saved.'));
      return FALSE;
    }
    
  } else {

    drupal_set_message(t('An exception occurred during the retrival.'));
    return FALSE;

  }
}

function npt_mendeley_analyse() {
  $gbif_participant_node_uuid = variable_get('gbif_participant_node_uuid');
  
  // Determine the country of the Node.
  $json_url = GBIF_REGISTRY_API_NODE . '/' . $gbif_participant_node_uuid;
  $gbif_registry_node_api_response = json_decode(file_get_contents($json_url));

  if (isset($gbif_registry_node_api_response->country) == TRUE) {
    $country = $gbif_registry_node_api_response->country;
    _npt_mendeley_analyse_country($country);
  } elseif (isset($gbif_registry_node_api_response->country) == FALSE) {
    drupal_set_message(t('The current associated GBIF Participant Node is not a country. No further activities with Mendeley API for now.'), 'warning');
    exit;
  }
}

function _npt_mendeley_analyse_country($country) {

  $tag_authored = $country;
  $tag_about = $country . '_biodiversity';

  $documents = json_decode(file_get_contents(file_create_url(file_build_uri('npt_mendeley/documents.json'))));
  $analysed_docs_authored = array();
  $analysed_docs_about = array();
  $analysed_result = array();

  // First iteration: get only documents tagged with country name
  foreach ($documents as $k => $doc) {
  // Only retrieve documents with Mendeley UUID
    if (isset($doc->uuid)) {
      if (in_array($tag_authored, $doc->tags)) {
        $analysed_docs_authored[] = $doc;
      }
      if (in_array($tag_about, $doc->tags)) {
        $analysed_docs_about[] = $doc;
      }
    }
    unset($documents[$k]);
  }
  if (count($documents) == 0) drupal_set_message(t('Finished analysing documents for @country.', array('@country' => $country)));

  // Produce the count of documents
  $authored_doc_count = count(_npt_mendeley_deduplicate($analysed_docs_authored));
  $analysed_result['authored']['count'] = $authored_doc_count;

  $about_doc_count = count(_npt_mendeley_deduplicate($analysed_docs_about));
  $analysed_result['about']['count'] = $about_doc_count;

  // Publications authored by scientists from a country
  if ($authored_doc_count > 0) {

    // Insert publication_outlet from Mendeley detail call
    foreach ($analysed_docs_authored as $adoc) {
      $url = MENDELEY_DOC_DETAIL_URL . $adoc->uuid . '/?consumer_key=' . NPT_MENDELEY_CONSUMER_KEY;
      $detail = json_decode(file_get_contents($url));
      $adoc->publication_outlet = $detail->publication_outlet;
    }
    
    $authored_json = json_encode($analysed_docs_authored);
    $authored_doc = file_save_data($authored_json, file_build_uri('npt_mendeley/authored_doc.json'), FILE_EXISTS_REPLACE);
    
    if ($authored_doc == TRUE) {
      drupal_set_message(format_plural($authored_doc_count,
        'There is a publication authored by scientists from @country, results saved.',
        'There are @count publications authored by scientists from @country, results saved.',
        array('@country' => $country)
      ));
    
      $analysed_result['authored']['file'] = 'authored_doc.json';
    }
  }
  else {
    drupal_set_message(t('In GBIF Public Library, so far no document found authored by scientists from @country.', array('@country' => $country)));
  }

  // Publications about biodiversity in a country
  if ($about_doc_count > 0) {
    // Insert publication_outlet from Mendeley detail call
    foreach ($analysed_docs_about as $adoc) {
      $url = MENDELEY_DOC_DETAIL_URL . $adoc->uuid . '/?consumer_key=' . NPT_MENDELEY_CONSUMER_KEY;
      $detail = json_decode(file_get_contents($url));
      $adoc->publication_outlet = $detail->publication_outlet;
    }

    $about_json = json_encode($analysed_docs_about);
    $about_doc = file_save_data($about_json, file_build_uri('npt_nodestats/about_doc.json'), FILE_EXISTS_REPLACE);

    if ($about_doc == TRUE) {
      drupal_set_message(format_plural($about_doc_count,
        'There is a publication about biodiversity of @country, results saved.',
        'There are @count publications about biodiversity of @country, results saved.',
        array('@country' => $country)
      ));
    
      $analysed_result['about']['file'] = 'about_doc.json';      
    }
  }
  else {
    drupal_set_message(t('In GBIF Public Library, so far no document found about biodiversity of @country.', array('@country' => $country)));    
  }
  
  variable_set('npt_mendeley_publication', $analysed_result);
    
}

/**
 * Helper function to digest essential variables in a mendeley call
 */
function _npt_mendeley_get_essential($curl_result) {
  $essential = array();
  $ratelimit_remaining = 0;
  $result_by_line = explode("\r\n", $curl_result);
  
  // Get the remaining rate from the header.
  foreach ($result_by_line as $line) {
    $header_ratelimit = strpos($line, "x-ratelimit-remaining");
    if ($header_ratelimit === 0) {
      $header = explode(":", $line);
      $ratelimit_remaining = trim($header[1]);
    }
  }
  
  // Get the documents in json format, convert it to array
  $json_result = json_decode(end($result_by_line));
  
  $essential['ratelimit_remaining'] = $ratelimit_remaining;
  $essential['documents'] = $json_result->documents;
  $essential['total_results'] = $json_result->total_results;
  $essential['total_pages'] = $json_result->total_pages;
  
  return $essential;
}


/*
 * Helper function to resolve duplicate documents
 */
function _npt_mendeley_deduplicate(&$docs) {
  $unique_docs = array();
  foreach ($docs as $doc) {
    $unique_docs[$doc->uuid] = $doc;
  }
  $docs = array_values($unique_docs);
  return $docs;
}

function _npt_mendeley_retrievel_progress() {
    
  $progress = json_encode(variable_get('npt_mendeley_retrieval_progress'));
  
  header('Last-Modified: ' . gmdate('D, d M Y H:i:s') . ' GMT');
  header('Cache-Control: no-cache, must-revalidate');
  header('Pragma: no-cache');
  header('Expires: Mon, 26 Jul 1991 05:00:00 GMT');  // disable IE caching
  header('Content-type: application/json');
  print_r($progress);

  exit();

}