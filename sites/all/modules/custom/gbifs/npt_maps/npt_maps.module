<?php

/**
 * Implementation of hook_gm3_alter().
 */
function npt_maps_gm3_map_alter(&$map){
  // Add the country mask to a google map on taxonomy term pages only.
  if($term = menu_get_object('taxonomy_term', 2)){

    // Use external KML files
    $map['libraries']['npt_country_mask'] = array(
      'module' => 'npt_maps',
    );
  }
}

/**
 * Implementation of hook_library().
 */
function npt_maps_library(){
  // Prepare coordinate and polygon information.
  // The country is first decided by the Participant setting.
  $gbif_participant_settings = variable_get('gbif_participant_settings');
  $iso2 = $gbif_participant_settings['node_country'];
  
  // Getting the WKT from gm3_region_data table.
  // @TODO: Need take into account that if this returns multiple results.
  $polygon_query = db_select('gm3_region_data', 'g')
               ->fields('g', array('polygons'))
               ->condition('iso_code', $iso2)
               ->execute();
  $row_count = $polygon_query->rowCount();
  $results = $polygon_query->fetchAll();
  
  if ($results <> FALSE) {
    gm3_load_geophp();
    
    if ($row_count > 1) {
      $rings = array();
      // Break all resuls into pieces of rings
      foreach ($results as $result) {
      	$pattern = '/\(([^()]+)\)/';
        preg_match_all($pattern, $result->polygons, $matched, PREG_PATTERN_ORDER);
        foreach ($matched[1] as $matched_ring) {
          array_push($rings, $matched_ring);
        }
      }
      // Assemble them back to one MULTIPOLYGON
      $rings_count = count($rings);
      $wkt = 'MULTIPOLYGON (';
      for ($i = 0; $i < $rings_count; $i++) {
        $wkt .= '((' . $rings[$i] . '))';
        if ($i < $rings_count -1) {
          $wkt .= ',';
        }
      }
      $wkt .= ')';
    }
    elseif ($row_count = 1) {
      $wkt = $results[0]->polygons;
    }
    $geometry = geoPHP::load($wkt);
    
    // Calculate the centre point of the geometry
    $centroid = $geometry->getCentroid();
    $centX = round($centroid->getX(), 2);
    $centY = round($centroid->getY(), 2);

    // Determine the four points of the masking polygon. There is obviously a better way
    // to deal with the limit of 180/90 lng/lat degree. But I'll live with it for now.
    $maxX = ($centX + 60 > 179) ? 179 : $centX + 60;
    $minX = ($centX - 60 < -179) ? -179 : $centX - 60;
    $maxY = ($centY + 60 > 89) ? 89 : $centY + 60;
    $minY = ($centY - 60 < -89) ? -89 : $centY - 60;

    // The points of the masking polygon should be put in counterclockwise order.
    // These four points will be sent to Google Map API to form the outer polygon,
    // So we don't need to put it as the first ring in the polygon WKT.
    $outer_ring_string = $maxX . ' ' . $maxY . ',' . $minX . ' ' . $maxY . ',' . $minX . ' ' . $minY . ',' . $maxX . ' ' . $minY . ',' . $maxX . ' ' . $maxY;

    return array(
      'npt_country_mask' => array(
        'title' => t('Country mask'),
        'version' => '0.1',
        'js' => array(
          array(
            'data' => drupal_get_path('module', 'npt_maps') . "/js/npt_maps.js"
          ),
          array(
            'data' => array(
              'npt_maps' => array(
                'settings' => array(
                  'mask' => array(
                    'wkt' => $wkt
                  ),
                  'centre' => array(
                    'centX' => $centX,
                    'centY' => $centY,
                  ),
                  'outerRingString' => $outer_ring_string,
                )
              )
            ),
            'type' => 'setting'
          ),
        ),
        'css' => array(
          array(
            'data' => drupal_get_path('module', 'npt_maps') . '/css/npt_maps.css'
          )
        ),
        'dependencies' => array(
          array(
            'gm3',
          )
        )
      )
    );
  }
  else {
    // Return empty array here so the Javascript and CSS don't load.
    return array();
  }      
}