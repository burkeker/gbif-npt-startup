<?php
/**
 * @file
*
* Test case for scratchpads solr with selenium
*/
if(!class_exists('DrupalSeleniumWebTestCase')){
  drupal_set_message(t('Selenium tests are not displayed because the selenium module is not enabled.'), 'warning', FALSE);
  return;
}

class ScratchpadsSolrSeleniumTestCase extends ScratchpadsTweaksSeleniumTestCase{

  protected $solr_server_ul = 'http://localhost:8983/solr';

  protected $admin_user;

  public static function getInfo(){
    return array(
      'name' => 'Scratchpads Solr (Selenium)',
      'description' => 'Tests for solr facets using Biblio nodes',
      'group' => 'Scratchpads',
      'browsers' => array(
        'firefox'
      )
    );
  }

  public function setUp(){
    parent::setUp();
    $default_permissions = module_invoke_all('scratchpads_default_permissions');
    // Get maintainer permissions as a starting point
    $admin_user_permissions = $default_permissions['maintainer'];
    $anon_user_permissions = $default_permissions['anonymous user'];
    $admin_user_permissions[] = 'access content overview';
    $admin_user_permissions[] = 'access dashboard';
    $admin_user_permissions[] = 'delete all file';
    $admin_user_permissions[] = 'edit all file';
    $admin_user_permissions[] = 'administer search';
    foreach($anon_user_permissions as $anon_perm){
      $admin_user_permissions[] = $anon_perm;
    }
    $this->admin_user = $this->drupalCreateUserWithName($admin_user_permissions, 'admin_user_name');
    legal_save_accept(1, 1, 'en', $this->admin_user->uid);
  }

  /**
   * A wrapper for the following tests
   */
  function testWrapper(){
    $this->drupalLogin($this->admin_user);
    // The following line sets solr server url to localhost
    // $this->setUpLocalSolr($this->solr_server_ul);
    // Add some biblio records to test solr facets with
    $data = array();
    $data = $this->addBiblio($data, 'Journal Article');
    $data = $this->addBiblio($data, 'Conference Paper');
    $data = $this->addBiblio($data, 'Book');
    $this->verboseScreenshot();
    $this->drupalGet('biblio');
    // Wait for elements to be processed by solr. This might be a long wait.
    $this->waitForSolrIndexing('biblio', "xpath=//*[text()[contains(.,'" . $data[0]['title'] . "')]]", 30);
    $this->verifyBiblioFacets($data);
  }

  /**
   * Verify that the solr facets are working correctly with biblio nodes
   */
  function verifyBiblioFacets($data){
    $this->verboseScreenshot();
    // Test filtering on every facet type for our first biblio entry
    foreach($data[0] as $field_name => $field_data){
      if($field_name != 'title'){
        // Avoid testing if random values are identical
        if(($field_data != $data[1][$field_name]) && ($field_data != $data[2][$field_name])){
          $link_text = $field_data . ' (1)';
          // We can't use the regular clickLink() function as the link also contains hidden text
          $this->driver->getElement("xpath=//a[text()[contains(.,'" . $link_text . "')]]")->click();
          $this->waitForElementsToBeNotVisible($data[1]['title']);
          $this->assertText($data[0]['title'], 'title 1 correctly shown after filtering by ' . $field_name);
          $this->assertNoText($data[1]['title'], 'title 2 correctly not shown after filtering by ' . $field_name);
          $this->assertNoText($data[2]['title'], 'title 3 correctly not shown after filtering by ' . $field_name);
          $this->verboseScreenshot();
          $this->driver->getElement("css=.facetapi-active")->click();
          $this->driver->waitForElements("xpath=//*[text()[contains(.,'" . $data[1]['title'] . "')]]");
          $this->assertText($data[0]['title'], "title 1 correctly shown after clicking '-' sign on " . $field_name);
          $this->assertText($data[1]['title'], "title 2 correctly shown after clicking '-' sign on " . $field_name);
          $this->assertText($data[2]['title'], "title 3 correctly shown after clicking '-' sign on " . $field_name);
          $this->verboseScreenshot();
        }
      }
    }
  }

  /**
   * 'Manually' add a biblio record
   */
  function addBiblio($data, $type){
    $this->drupalGet('node/add/biblio');
    $element = $this->driver->getElement("name=biblio_type");
    $element->selectLabel($type);
    $title = $this->randomName();
    $author = $this->randomName();
    $keyword = $this->randomName();
    // generate a random year between 1900 and 2013
    $year = rand(1900, 2013);
    // wait for next page to load
    $this->driver->waitForElements("name=title");
    $element = $this->driver->getElement("name=title");
    $element->clear();
    $element->sendKeys($title);
    $element = $this->driver->getElement("name=biblio_contributors[0][name]");
    $element->clear();
    $element->sendKeys($author);
    // Click Tab
    $this->clickLink('Publication');
    $this->driver->waitForElements("name=biblio_year");
    $element = $this->driver->getElement("name=biblio_year");
    $element->clear();
    $element->sendKeys($year);
    if($type == 'Journal Article'){
      $secondary_title = $this->randomName();
      $element = $this->driver->getElement("name=biblio_secondary_title");
      $element->clear();
      $element->sendKeys($secondary_title);
    }else{
      $secondary_title = '';
    }
    // Click Tab
    $this->clickLink('Keywords');
    $this->driver->waitForElements("name=biblio_keywords");
    $element = $this->driver->getElement("name=biblio_keywords");
    $element->clear();
    $element->sendKeys($keyword);
    // submit the form
    $submit_button = $this->driver->getElement("id=edit-submit");
    $submit_button->click();
    $this->verboseScreenshot();
    $data[] = array(
      'title' => $title,
      'year' => $year,
      'author' => $author,
      'type' => $type,
      'secondary title' => $secondary_title,
      'keywords' => $keyword
    );
    return $data;
  }
}
