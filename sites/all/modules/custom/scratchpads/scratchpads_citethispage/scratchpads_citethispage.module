<?php

/**
 * Implement hook_block_info_alter
 *
 * Place the block in the slide top region
 */
function scratchpads_citethispage_block_info_alter(&$blocks, $theme, $code_blocks){
  if($theme == SCRATCHPADS_THEME_NAME){
    $blocks['citethispage']['citethispage_block']['status'] = 1;
    $blocks['citethispage']['citethispage_block']['region'] = 'slide_top';
    $blocks['citethispage']['citethispage_block']['weight'] = 2;
  }
}

/**
 * Implement hook_block_citethispage_citethispage_block_alter
 *
 * Re-organise the block to add sliding functionality
 */
function scratchpads_citethispage_block_view_citethispage_citethispage_block_alter(&$data, $block){
  if(!$data){return;}
  $data['content'] = array(
    '#prefix' => '<div class="scratchpads-slide-toggle-container">',
    '#suffix' => '</div>',
    'link' => array(
      '#markup' => l(t('Cite me'), '#', array(
        'attributes' => array(
          'class' => array(
            'scratchpads-slide-toggle'
          )
        )
      ))
    ),
    'body' => array(
      '#prefix' => '<div class="scratchpads-slide-toggle-body">',
      '#suffix' => '</div>',
      'sub' => $data['content']
    ),
    '#attached' => array(
      'css' => array(
        drupal_get_path('module', 'scratchpads_citethispage') . '/scratchpads_citethispage.css'
      )
    )
  );
}

/**
 * Implement hook_view_post_execute
 */
function scratchpads_citethispage_views_post_execute(&$view){
  if(!preg_match('%^taxonomy/term/(\d+)%', current_path())){return;}
  if($view->base_table == 'node' || $view->base_table == 'file_managed'){
    if($view->name == 'species_media' && $view->is_attachment){      // These get called but are not used in this context
return;}
    foreach($view->result as $delta => $row){
      if(!empty($row->{$view->base_field})){
        // Actually loading the node now would discard all the benefits from using views with fields,
        // so we'll fetch the author name from the database
        $author = db_query("
          SELECT u.uid, u.name
            FROM {users} u
           INNER JOIN {" . $view->base_table . "} v ON v.uid = u.uid
          WHERE v." . $view->base_field . " = :base_field
        ", array(
          ':base_field' => $row->{$view->base_field}
        ))->fetchAssoc();
        if($author){
          _scratchpads_citethispage_authors($author['uid'], $author['name']);
        }
      }
    }
  }
}

/**
 * _scratchpads_citethispage_authors
 *
 * Store the authors of the current page in a static
 * variable
 */
function _scratchpads_citethispage_authors($uid = NULL, $name = NULL){
  $authors = &drupal_static(__FUNCTION__);
  if(!isset($authors)){
    $authors = array();
  }
  if($uid && $name){
    $authors[$uid] = $name;
  }
  return $authors;
}

/**
 * Implement hook_citethispage_info
 */
function scratchpads_citethispage_citethispage_info(){
  return array(
    'scratchpads_citethispage' => array(
      'parse' => array(
        'taxonomy/term/%' => array(
          'title' => t('Taxonomy term (main)'),
          'description' => t('Gather information from the main taxonomy term page'),
          'callback' => 'scratchpads_citethispage_parse_taxonomy_term'
        ),
        'taxonomy/term/%/%' => array(
          'title' => t('Taxonomy term (tabs)'),
          'description' => t('Gather information from the taxonomy term tabs'),
          'callback' => 'scratchpads_citethispage_parse_taxonomy_term'
        )
      )
    )
  );
}

/**
 * scratchpads_citethispage_parse_taxonomy_term
 */
function scratchpads_citethispage_parse_taxonomy_term($path){
  $matches = array();
  if(!preg_match('/^taxonomy\/term\/(\d+)(\/(\w+))?$/', $path, $matches)){return FALSE;}
  $tid = $matches[1];
  $sub = isset($matches[3]) ? $matches[3] : 'overview';
  $term = taxonomy_term_load($tid);
  $simple_vids = variable_get('scratchpads_simple_taxonomy_page_vids', array());
  if(!$term || (isset($simple_vids[$term->vid]) && !$simple_vids[$term->vid])){return FALSE;}
  if(!scratchpads_species_term_is_biological_classification($term)){return FALSE;}
  return array(
    'authors' => _scratchpads_citethispage_authors(),
    'date' => array(
      time() => format_date(time())
    ),
    'title' => array(
      $term->tid => $term->name
    )
  );
}

/**
 * Implement hook_scratchpads_default_permissions
 */
function scratchpads_citethispage_scratchpads_default_permissions(){
  return array(
    'anonymous user' => array(
      'citethispage_cite'
    ),
    'maintainer' => array(
      'citethispage_admin'
    )
  );
}
