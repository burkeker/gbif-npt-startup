<?php
define(SCRATCHPADS_LUCID_APPLET_300_JAR, '300/Lucid3PlayerApplet.jar');
define(SCRATCHPADS_LUCID_APPLET_300_CODE, 'com.cbit.lucid.player.application.LucidPlayerAppletV3_00');
define(SCRATCHPADS_LUCID_APPLET_350_JAR, '350/Lucid3PlayerApplet.jar');
define(SCRATCHPADS_LUCID_APPLET_350_CODE, 'com.cbit.lucid.player.application.LucidPlayerApplet');
define(SCRATCHPADS_LUCID_APPLET_EXTENSIONS, 'lkc3,lkc4,dep,fil,sco,data,xml,htm,html,css,doc,jpg,png,gif,db,tif');

/**
 * Implement hook_field_formatter_info
 * 
 * - Provide a formatter for Lucid Keys
 */
function scratchpads_lucid_applet_field_formatter_info(){
  return array(
    'scratchpads_lucid_applet' => array(
      'label' => t('Lucid3 Key player applet'),
      'description' => t('Embeds the Lucid3 Key player applet. The uploaded file must be a .zip file, containing the .lkc3/4 key file and associated directory.'),
      'field types' => array(
        'file'
      ),
      'settings' => array(
        'lucid_width' => '100%',
        'lucid_height' => '800px'
      )
    )
  );
}

/**
 * Implement hook_field_formatter_view
 * 
 */
function scratchpads_lucid_applet_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display){
  if($display['type'] == 'scratchpads_lucid_applet'){
    module_load_include('inc', 'scratchpads_lucid_applet', 'scratchpads_zip_archive');
    $elements = array();
    $width = $display['settings']['lucid_width'];
    $height = $display['settings']['lucid_height'];
    $lucid_archives = variable_get('scratchpads_lucid_archives', array());
    foreach($items as $item){
      try{
        $archive = new ScratchpadsZipArchive($item);
        $archive->extract(explode(',', SCRATCHPADS_LUCID_APPLET_EXTENSIONS));
      }
      catch(Exception $e){
        drupal_set_message($e->getMessage(), 'error');
        continue;
      }
      if(!isset($lucid_archives[$archive->archive->fid])){
        $lucid_archives[$archive->archive->fid] = $archive->archive->fid;
        variable_set('scratchpads_lucid_archives', $lucid_archives);
      }
      // Locate the key file
      $files = $archive->extractedFiles();
      $key_file = reset(array_filter($files, function ($v){
        return preg_match('/\.lkc[34]$/', $v);
      }));
      $jar_file_pos = array_search('Lucid3PlayerApplet.jar', $files);
      if($jar_file_pos !== FALSE){
        // This is not currently available (.jar doesn't get extracted) - because we can't actually guess the right 'code' element.
        $jar_file = $files[$jar_file_pos];
        $code = '';
      }else{
        if(preg_match('/\.lkc3$/', $key_file)){
          $jar_file = file_create_url(drupal_get_path('module', 'scratchpads_lucid_applet') . '/jars/' . SCRATCHPADS_LUCID_APPLET_300_JAR);
          $code = SCRATCHPADS_LUCID_APPLET_300_CODE;
        }else{
          $jar_file = file_create_url(drupal_get_path('module', 'scratchpads_lucid_applet') . '/jars/' . SCRATCHPADS_LUCID_APPLET_350_JAR);
          $code = SCRATCHPADS_LUCID_APPLET_350_CODE;
        }
      }
      if(!$key_file){
        drupal_set_message(t('Could not find key file %key_file', array(
          '%key_file' => implode(' ', $files) //$key_file
        )), 'error');
        // For safety we delete the extracted archive.
        $archive->deleteExtractedFiles();
        continue;
      }
      $key_file = file_create_url($key_file);
      $elements[] = array(
        '#markup' => '<applet code="' . $code . '" archive="' . $jar_file . '" width="' . $width . '" height="' . $height . '">' . '<param name="code" value="' . $code . '" />' . '<param name="archive" value="' . $jar_file . '" />' . '<param name="key" value="' . $key_file . '" />' . '</applet>'
      );
    }
    return $elements;
  }
}

/**
 * Implement hook_field_formatter_settings_form
 * 
 */
function scratchpads_lucid_applet_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state){
  $display = $instance['display'][$view_mode];
  if($display['type'] == 'scratchpads_lucid_applet'){
    $settings = $display['settings'];
    $element = array();
    $element['lucid_width'] = array(
      '#title' => t('Width'),
      '#type' => 'textfield',
      '#description' => t('A width in pixels or %'),
      '#default_value' => $settings['lucid_width'],
      '#element_validate' => array(
        '_scratchpads_lucid_applet_validate_css_size'
      ),
      '#required' => TRUE
    );
    $element['lucid_height'] = array(
      '#title' => t('Height'),
      '#type' => 'textfield',
      '#description' => 'A height in pixels or %',
      '#default_value' => $settings['lucid_height'],
      '#element_validate' => array(
        '_scratchpads_lucid_applet_validate_css_size'
      ),
      '#required' => TRUE
    );
    return $element;
  }
}

/**
 * Implement hook_field_formatter_settings_summary
 * 
 */
function scratchpads_lucid_applet_field_formatter_settings_summary($field, $instance, $view_mode){
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $summary = '';
  if($display['type'] == 'scratchpads_lucid_applet'){
    $summary = t('Width: @width, Height: @height', array(
      '@width' => $settings['lucid_width'],
      '@height' => $settings['lucid_height']
    ));
  }
  return $summary;
}

/**
 * Validate that a string is a CSS style measurement
 * 
 */
function _scratchpads_lucid_applet_validate_css_size($element, &$form_state){
  $value = trim($element['#value']);
  if(!preg_match('/^\d+(px|%|em|pt)$/', $value)){
    form_error($element, t('%name must be a valid CSS size, such as 100% or 800px', array(
      '%name' => $element['#title']
    )));
  }
}

/**
 * Implement hook_file_delete
 *
 * Delete extracted versions of ZIP files that were extracted
 * from a Lucid key archive
 *
 */
function scratchpads_lucid_applet_file_delete($file){
  if($file->filemime == 'application/zip'){
    $lucid_archives = variable_get('scratchpads_lucid_archives', array());
    if(isset($lucid_archives[$file->fid])){
      module_load_include('inc', 'scratchpads_lucid_applet', 'scratchpads_zip_archive');
      try{
        $archive = new ScratchpadsZipArchive($file);
        $archive->deleteExtractedFiles();
      }
      catch(Exception $e){
        drupal_set_message(t("Could not delete extracted files for archive %file_name", array(
          '%name' => $file->filename
        )));
      }
      unset($lucid_archives[$file->fid]);
      variable_set('scratchpads_lucid_archives', $lucid_archives);
    }
  }
}