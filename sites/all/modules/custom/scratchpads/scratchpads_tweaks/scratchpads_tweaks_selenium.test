<?php
/**
 * @file
 *
 * Test case for Drupal core misc/machine-name.js javascript.
 */
if(!class_exists('DrupalSeleniumWebTestCase')){
  drupal_set_message(t('Selenium tests are not displayed because the selenium module is not enabled.'), 'warning', FALSE);
  return;
}

class ScratchpadsTweaksSeleniumTestCase extends DrupalSeleniumWebTestCase{

  protected $admin_user;

  protected $basic_user;

  protected $profile = 'scratchpad_2';

  public static function getInfo(){
    return array(
      'name' => 'Scratchpads Tweaks Selenium',
      'description' => 'Enable all of the modules associated with a Scratchpad to see where errors occur. Tests simple user login and front page access',
      'group' => 'Scratchpads Selenium',
      'browsers' => array(
        'firefox'
      )
    );
  }

  /**
   * Overrides DrupalSeleniumWebTestCase setup()
   */
  protected function setUp(){
    $modules = func_get_args();
    if(isset($modules[0]) && is_array($modules[0])){
      $modules = $modules[0];
    }
    include DRUPAL_ROOT . '/' . drupal_get_path('module', 'scratchpads_tweaks') . "/scratchpads_tweaks.inc";
    $browser = 'firefox';
    if(in_array($this->browser, $this->allowed_browsers)){
      $browser = $this->browser;
    }
    $this->driver = $this->seleniumDriver($browser);
    if($this->onOriginal){
      $this->sandboxDatabasePrefix = $this->databasePrefix;
      $this->originalDatabasePrefix = NULL;
      Database::renameConnection('default', 'simpletest_sandbox');
      $connection_info = Database::getConnectionInfo('simpletest_sandbox');
      Database::addConnectionInfo('default', 'default', $connection_info['default']);
      $this->switchConnectionTo('simpletest_original_default');
    }
    // Admin user without 'access overlay' permission
    $this->admin_user = $this->drupalCreateUserWithName(array(
      'access content',
      'access administration pages',
      'administer site configuration',
      'administer users',
      'administer permissions',
      'administer content types',
      'administer nodes',
      'bypass node access',
      'access content overview',
      'view the administration theme',
      'access all views',
      'administer comments',
      'administer front page',
      'access toolbar'
    ), 'admin-user');
    legal_save_accept(1, 1, 'en', $this->admin_user->uid);
    // Create a user with username 'basic-user'
    $this->basic_user = $this->drupalCreateUserWithName(array(
      'access content',
      'access user profiles'
    ), 'basic-user');
    legal_save_accept(1, 1, 'en', $this->basic_user->uid);
  }

  /**
   * Overrides DrupalWebTestCase drupallogin().
   * @see DrupalWebTestCase::drupalLogin()
   */
  protected function drupalLogin(stdClass $account){
    if($this->loggedInUser){
      $this->drupalLogout();
    }
    $edit = array(
      'name' => $account->name,
      'pass' => $account->pass_raw
    );
    // there may be an issue with post for logins
    $this->drupalPost('user', $edit, t('Log in'));
    // override is here
    $pass = $this->assertNoText('Sorry, unrecognized username or password', 'User successfully logged in');
    if($pass){
      $this->loggedInUser = $account;
    }
  }

  /**
   * We temporarily override this function to remove views handler debug errors, mainly caused by legal module
   */
  public function errorHandler($severity, $message, $file = NULL, $line = NULL){
    if($severity & error_reporting()){
      $error_map = array(
        E_STRICT => 'Run-time notice',
        E_WARNING => 'Warning',
        E_NOTICE => 'Notice',
        E_CORE_ERROR => 'Core error',
        E_CORE_WARNING => 'Core warning',
        E_USER_ERROR => 'User error',
        E_USER_WARNING => 'User warning',
        E_USER_NOTICE => 'User notice',
        E_RECOVERABLE_ERROR => 'Recoverable error'
      );
      $backtrace = debug_backtrace();
      if(strpos($message, 'Missing handler') !== false){
        // Do not show the error
      }else{
        $this->error($message, $error_map[$severity], _drupal_get_last_caller($backtrace));
      }
    }
    return TRUE;
  }

  /**
   * Allow the creation of a user with a specific username
   */
  protected function drupalCreateUserWithName(array $permissions = array(), $username){
    // Create a role with the given permission set, if any.
    $rid = FALSE;
    if($permissions){
      $rid = $this->drupalCreateRole($permissions);
      if(!$rid){return FALSE;}
    }
    // Create a user assigned to that role.
    $edit = array();
    $edit['name'] = $username;
    $edit['mail'] = $edit['name'] . '@example.com';
    $edit['pass'] = user_password();
    $edit['status'] = 1;
    if($rid){
      $edit['roles'] = array(
        $rid => $rid
      );
    }
    $account = user_save(drupal_anonymous_user(), $edit);
    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array(
      '%name' => $edit['name'],
      '%pass' => $edit['pass']
    )), t('User login'));
    if(empty($account->uid)){return FALSE;}
    // Add the raw password so that we can log in as this user.
    $account->pass_raw = $edit['pass'];
    return $account;
  }
  //
  
  /**
   * Allow the creation of a user with a specific username
   */
  protected function drupalCreateMaintainer(array $permissions = array(), $username){
    // Create a role with the given permission set, if any.
    $rid = 5;
    
    // Create a user assigned to that role.
    $edit = array();
    $edit['name'] = $username;
    $edit['mail'] = $edit['name'] . '@example.com';
    $edit['pass'] = user_password();
    $edit['status'] = 1;
    if($rid){
      $edit['roles'] = array(
        $rid => $rid
      );
    }
    $account = user_save(drupal_anonymous_user(), $edit);
    $this->assertTrue(!empty($account->uid), t('User created with name %name and pass %pass', array(
      '%name' => $edit['name'],
      '%pass' => $edit['pass']
    )), t('User login'));
    if(empty($account->uid)){return FALSE;}
    // Add the raw password so that we can log in as this user.
    $account->pass_raw = $edit['pass'];
    return $account;
  }
  //
  /**
   * Returns a new vocabulary with random properties.
   * Code based on TaxonomyWebTestCase::createVocabulary
   */
  function createBioVocabularyWithName($name = ''){
    // Create a vocabulary.
    $vocabulary = new stdClass();
    if($name != ''){
      $vocabulary->name = $name;
    }else{
      $vocabulary->name = $this->randomName();
    }
    $vocabulary->description = $this->randomName();
    $vocabulary->machine_name = drupal_strtolower($this->randomName());
    $vocabulary->help = '';
    $vocabulary->biological_classification = 1;
    $vocabulary->nodes = array(
      'article' => 'article'
    );
    $vocabulary->weight = mt_rand(0, 10);
    taxonomy_vocabulary_save($vocabulary);
    return $vocabulary;
  }

  /**
   * Returns a new term with random properties in vocabulary $vid.
   * Code based on TaxonomyWebTestCase::createTerm
   */
  protected function createTermWithName($vocabulary, $name){
    $term = new stdClass();
    $term->name = $name;
    $term->description = $this->randomName();
    // Use the first available text format.
    $term->format = db_query_range('SELECT format FROM {filter_format}', 0, 1)->fetchField();
    $term->vid = $vocabulary->vid;
    taxonomy_term_save($term);
    return $term;
  }
  
  /**
   * Helper function for autocomplete fields
   */
  function _autocompleteTest($field_name, $firstletter, $expected){
    $element = $this->driver->getElement("name=" . $field_name);
    $element->sendKeys($firstletter);
    // Ensure autocomplete element appeared.
    $autocomplete_element = current($this->driver->waitForVisibleElements('id=autocomplete'));
    $this->assertTrue($autocomplete_element->isVisible(), t('Autocomplete element is visible on the page.'));
    // Get first elements of autocomplete list and click on it.
    $first_element = current($this->driver->getAllElements('css=#autocomplete li div'));
    $first_element_text = $first_element->getText();
    // Click is to select line item.
    $first_element->click();
    // Submit selected line item.
    $first_element->submit();
    // Ensure that textfield is populated with selected element.
    $element_value = $element->getValue();
    $this->assertEqual($expected, $element_value, t('Text of selected element is populated to textfield.'));
  }
  
  /**
   * Simple test to see if we can login and access the home page
   */
  // We remove this test as it slows up all dependant tests
  //function testSimple(){
  //  $this->drupalLogin($this->basic_user);
  //  $this->drupalGet('');
  // }
}
