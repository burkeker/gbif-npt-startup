<?php

/**
 * Implements hook_block_info().
 */
function scratchpads_blog_block_info(){
  $blocks['blog_filters'] = array(
    'info' => t('Scratchpads blog filters'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => 1,
    'pages' => "blog\nblog/*",
    'region' => 'sidebar',
    'weight' => 20,
    'visibility' => BLOCK_VISIBILITY_LISTED
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function scratchpads_blog_block_view($delta = ''){
  $block = array();
  switch($delta){
    case 'blog_filters':
      $block['subject'] = t('');
      $block['content'] = array();
      $block['content']['scratchpads_blog_authors'] = array(
        '#theme' => 'item_list',
        '#items' => scratchpads_blog_authors(),
        '#title' => t('Filter by Author'),
        '#type' => 'ul'
      );
      $block['content']['scratchpads_blog_taxonomy'] = array(
        '#theme' => 'item_list',
        '#items' => scratchpads_blog_taxonomy(),
        '#title' => t('Filter by Taxonomy'),
        '#type' => 'ul'
      );
      $block['content']['scratchpads_blog_date'] = array(
        '#theme' => 'item_list',
        '#items' => scratchpads_blog_date(),
        '#title' => t('Filter by Date'),
        '#type' => 'ul'
      );
      $block['content']['#attached']['css'][] = drupal_get_path('module', 'scratchpads_blog') . '/css/scratchpads_blog.css';
      break;
  }
  return $block;
}

/**
 * Implements hook_menu().
 */
function scratchpads_blog_menu(){
  $items['blog/%user_uid_optional/%/%'] = array(
    'title' => 'Blogs',
    'page callback' => 'scratchpads_blog_remake',
    'page arguments' => array(
      1
    ),
    'access arguments' => array(
      'access content'
    ),
    'type' => MENU_CALLBACK
  );
  // overrides the blog module
  $items['blog'] = array(
    'title' => 'Blogs',
    'page callback' => 'scratchpads_blog_page_last',
    'access arguments' => array(
      'access content'
    ),
    'type' => MENU_SUGGESTED_ITEM
  );
  // overrides the blog module
  $items['blog/%user_uid_optional'] = array(
    'title' => 'My blog',
    'page callback' => 'scratchpads_blog_page_user',
    'page arguments' => array(
      1
    ),
    'access callback' => 'blog_page_user_access',
    'access arguments' => array(
      1
    )
  );
  return $items;
}

/**
 *  Create the blog page when date or taxomony terms are present in the URL
 *  Overrrides blog module
 */
function scratchpads_blog_remake($account){
  $tid = 0;
  $date = ''; // the raw date from the url;
  $date1 = 0; // timestamp start
  $date2 = 0; // timestamp end
  $date_operator1 = '>=';
  $date_operator2 = '>';
  if(arg(2) == 'term'){
    $tid = arg(3);
  }else if(arg(2) == 'date'){
    $date = arg(3);
  }
  if(arg(4) == 'term'){
    $tid = arg(5);
  }elseif(arg(4) == 'date'){
    $date = arg(5);
  }
  if($date != ''){
    $date_year = substr($date, 0, 4);
    $date_month = substr($date, 5, 2);
    if($date_month != ''){
      $d1 = ltrim($date_month, '0');
      $date1 = mktime(0, 0, 0, $d1, 1, $date_year);
      $date2 = mktime(0, 0, 0, $d1 + 1, 1, $date_year);
      $month_string = date('M', $date1) . ' ';
    }else{
      $date1 = mktime(0, 0, 0, 0, 0, $date_year);
      $date2 = mktime(0, 0, 0, 0, 0, $date_year + 1);
      $month_string = '';
    }
    $date_operator2 = '<';
    $date_string = ', Date (' . $month_string . $date_year . ').';
    $simple_date_string = $month_string . $date_year;
  }else{
    $date_string = '.';
  }
  global $user;
  // The selected user id, if any
  $uid = arg(1);
  if($uid != ''){
    $user_condition_operator = '=';
  }else{
    $user_condition_operator = '>';
    $uid = 0;
  }
  if($user->uid == $account->uid){
    drupal_set_title($title = t("My Blog"));
  }else{
    drupal_set_title($title = t("Blog"));
  }
  // set the sub-title
  if(($uid == 0) && ($tid > 0)){
    $sub_title = t("Filtered on Taxonomy term (@term)@date_string", array(
      '@term' => taxonomy_term_load($tid)->name,
      '@date_string' => $date_string
    ));
  }elseif(($uid > 0) && ($tid > 0)){
    $sub_title = t("Filtered on Author (@name), Taxonomy term (@term)@date_string", array(
      '@name' => format_username($account),
      '@term' => taxonomy_term_load($tid)->name,
      '@date_string' => $date_string
    ));
  }elseif(($uid > 0) && ($tid == 0)){
    $sub_title = t("Filtered on Author (@name)@date_string", array(
      '@name' => format_username($account),
      '@date_string' => $date_string
    ));
  }elseif(($uid == 0) && ($tid == 0) && ($date != '')){
    $sub_title = t("Filtered on - Date (@date_string)", array(
      '@date_string' => $simple_date_string
    ));
  }
  $build = array();
  $query = db_select('node', 'n')->extend('PagerDefault');
  $query->leftjoin('taxonomy_index', 't', 'n.nid = t.nid');
  if($tid > 0){
    $nids = $query->fields('n', array(
      'nid',
      'sticky',
      'created'
    ))->condition('n.type', 'blog')->condition('n.uid', $account->uid, $user_condition_operator)->condition('n.status', 1)->condition('n.created', $date1, $date_operator1)->condition('n.created', $date2, $date_operator2)->condition('t.tid', $tid, '=')->orderBy('n.sticky', 'DESC')->orderBy('n.created', 'DESC')->limit(variable_get('default_nodes_main', 10))->addTag('node_access')->execute()->fetchCol();
  }else{
    $nids = $query->fields('n', array(
      'nid',
      'sticky',
      'created'
    ))->condition('n.type', 'blog')->condition('n.uid', $account->uid, $user_condition_operator)->condition('n.status', 1)->condition('n.created', $date1, $date_operator1)->condition('n.created', $date2, $date_operator2)->orderBy('n.sticky', 'DESC')->orderBy('n.created', 'DESC')->limit(variable_get('default_nodes_main', 10))->addTag('node_access')->execute()->fetchCol();
  }
  if(!empty($nids)){
    $nodes = node_load_multiple($nids);
    $build += node_view_multiple($nodes);
    $c = 1;
    foreach(element_children($build['nodes']) as $key){
      if($c % 2){
        $build['nodes'][$key]['#prefix'] = '<div class="search-row-odd">';
        $build['nodes'][$key]['#suffix'] = '</div>';
      }
      $c++;
    }
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5
    );
  }else{
    // maybe better to put a set_message here
    drupal_set_title($title = t("There are no blog entires for this selection"));
  }
  if($sub_title != ''){
    array_unshift($build, array(
      '#markup' => "<h2 class='blog_filter_text'>" . $sub_title . "</h2>"
    ));
  }
  return $build;
}

/**
 * Returns a list of author filter links for blogs.
 */
function scratchpads_blog_authors(){
  $term_id = '';
  if(arg(2) == 'term'){
    $term_id = arg(3);
    $taxonomy_operator = '=';
  }else if(arg(2) == 'date'){
    $date = arg(3);
  }
  if(arg(4) == 'term'){
    $term_id = arg(5);
    $taxonomy_operator = '=';
  }elseif(arg(4) == 'date'){
    $date = arg(5);
  }
  if($date != ''){
    $date_year = substr($date, 0, 4);
    $date_month = substr($date, -2);
    $date1 = mktime(0, 0, 0, 0, 0, $date_year);
    $date2 = mktime(0, 0, 0, 0, 0, $date_year + 1);
    $date_operator1 = '>';
    $date_operator2 = '<';
    $date_string = '/date/' . $date;
  }else{
    $date_string = '';
  }
  if($term_id != ''){
    $term_condition_operator = '=';
  }else{
    $term_condition_operator = '>';
    $term_id = 0;
  }
  $query = db_select('node', 'n');
  $query->join('users', 'u', 'n.uid = u.uid');
  $query->leftjoin('taxonomy_index', 't', 'n.nid = t.nid');
  $query->fields('u', array(
    'name'
  ));
  $query->fields('n', array(
    'type'
  ));
  $query->fields('u', array(
    'uid'
  ));
  $query->condition('u.status', 1);
  $query->condition('n.status', 1);
  $query->condition('n.type', 'blog', '=');
  if($date != ''){
    $query->condition('n.created', $date1, $date_operator1);
    $query->condition('n.created', $date2, $date_operator2);
  }
  if($term_id != 0){
    $query->condition('t.tid', $term_id, $term_condition_operator);
  }
  $query->addExpression('COUNT(DISTINCT(n.nid))');
  $query->groupBy('u.uid');
  $query->groupBy('n.type');
  $query->orderBy('COUNT(n.uid)', 'DESC');
  $result = $query->execute();
  $output = "<div id='blog_list_author'>";
  $counter = 0;
  $items = array();
  while($record = $result->fetchAssoc()){
    $output = '';
    if($term_id > 0){
      $term_string = "/term/" . $term_id;
    }else{
      $term_string = '';
    }
    if(arg(1) == $record['uid']){
      $path = "blog/" . $term_string . $date_string;
      $output .= l('(-) ', $path, array(
        'attributes' => array(
          'title' => 'View blogs for all users'
        )
      ));
    }
    $path2 = "blog/" . $record['uid'] . $term_string . $date_string;
    $output .= l($record['name'], $path2);
    $output .= ' (' . $record['expression'] . ')';
    $counter++;
    $items[] = $output;
  }
  if($counter == 0){
    $items[] = "<div class='blog_no_match'>No matching authors.<div/>";
  }
  return $items;
}

/**
 * Returns a string containing taxonomy filter links for blogs.
 */
function scratchpads_blog_taxonomy(){
  $date = '';
  $uid = arg(1);
  if(arg(2) == 'term'){
    $tid = arg(3);
    $taxonomy_operator = '=';
  }else if(arg(2) == 'date'){
    $date = arg(3);
  }
  if(arg(4) == 'term'){
    $tid = arg(5);
    $taxonomy_operator = '=';
  }elseif(arg(4) == 'date'){
    $date = arg(5);
  }
  // need to get a timestamp range for the date.../date/2012-03
  // for now, just the year
  if($date != ''){
    $date_year = substr($date, 0, 4);
    $date_month = substr($date, -2);
    $date1 = mktime(0, 0, 0, 0, 0, $date_year);
    $date2 = mktime(0, 0, 0, 0, 0, $date_year + 1);
    $date_string = '/date/' . $date;
  }else{
    $date_string = '';
  }
  $query = db_select('node', 'n');
  $query->join('taxonomy_index', 't', 'n.nid = t.nid');
  $query->join('taxonomy_term_data', 'd', 'd.tid = t.tid');
  $query->fields('n');
  $query->fields('t', array(
    'tid'
  ));
  $query->fields('d', array(
    'name'
  ));
  $query->condition('n.status', 1);
  $query->condition('n.type', 'blog', '=');
  if($uid != ''){
    $query->condition('n.uid', $uid, '=');
  }
  if($date != ''){
    $query->condition('n.created', $date1, '>');
    $query->condition('n.created', $date2, '<');
  }
  $query->orderby('d.name');
  $result = $query->execute();
  $terms_names = array();
  $tid_array = array();
  while($record = $result->fetchAssoc()){
    $tid_array[] = $record['tid'];
    $terms_names[$record['tid']] = $record['name'];
  }
  $count_array = array_count_values($tid_array);
  arsort($count_array);
  $output = '';
  $counter = 0;
  $last_count = 0;
  $items = array();
  foreach($count_array as $term_id => $blog_count){
    $output = '';
    if(arg(3) == $term_id){
      $path = "blog/" . arg(1) . $date_string;
      $output .= l('(-) ', $path, array(
        'attributes' => array(
          'title' => 'View blogs for all taxonomy terms'
        )
      ));
    }
    $path = 'blog/';
    if($uid > 0){
      $path .= $uid;
    }
    $path .= "/term/" . $term_id . $date_string;
    $output .= l($terms_names[$term_id], $path);
    $output .= " (" . $blog_count . ")";
    $counter++;
    if(($counter >= 5) && ($last_count != $blog_count)){
      break;
    }
    $last_count = $blog_count;
    $items[] = $output;
  }
  if($counter == 0){
    $output = "<div class='blog_no_match'>No matching taxonomies.<div/>";
    $items[] = $output;
  }
  return $items;
}

/**
 *  Returns date filter list for blogs, by year and month
 */
function scratchpads_blog_date(){
  $uid = arg(1);
  $tid = 0;
  if(arg(2) == 'term'){
    $tid = arg(3);
    $taxonomy_operator = '=';
  }else if(arg(2) == 'date'){
    $date = arg(3);
  }
  if(arg(4) == 'term'){
    $tid = arg(5);
    $taxonomy_operator = '=';
  }elseif(arg(4) == 'date'){
    $date = arg(5);
  }
  $output = '';
  $uid = arg(1);
  if($uid != ''){
    $user_condition_operator = '=';
  }else{
    $user_condition_operator = '>';
    $uid = 0;
  }
  $query = db_select('node', 'n');
  $query->leftjoin('taxonomy_index', 't', 'n.nid = t.nid');
  $query->fields('n');
  $query->fields('t', array(
    'tid'
  ));
  $query->condition('n.status', 1);
  $query->condition('n.type', 'blog', '=');
  $query->condition('n.uid', $uid, $user_condition_operator);
  if($tid != 0){
    $query->condition('t.tid', $tid, '=');
  }
  $query->groupBy('n.nid');
  $result = $query->execute();
  $terms_names = array();
  $tid_array = array();
  $date_array = array();
  $month_array = array();
  while($record = $result->fetchAssoc()){
    $date_array[] = date('Y', $record['created']);
    $month_array[date('Y', $record['created'])][] = date('m', $record['created']);
  }
  $new_month_array = array();
  foreach($month_array as $key => $single_year){
    $count_m_array = array_count_values($single_year);
    arsort($count_m_array);
    $new_month_array[$key] = $count_m_array;
  }
  $count_array = array_count_values($date_array);
  arsort($count_array);
  $items = array();
  $counter = 0;
  foreach($count_array as $year => $year_count){
    $counter++;
    $output = '';
    // Add symbol to selected item
    if($uid == 0){
      $uid = '';
    }
    if(($date == $year) && (substr($date, 5, 2) == '')){
      $path = "blog/" . $uid;
      if($tid > 0){
        $path .= "/term/" . $tid;
      }
      $output .= l('(-) ', $path, array(
        'attributes' => array(
          'title' => 'View blogs for all years'
        )
      ));
    }
    // Add the date link
    if($uid == 0){
      $uid = '';
    }
    $path = "blog/" . $uid;
    if($tid > 0){
      $path .= "/term/" . $tid;
    }
    $path .= "/date/" . $year;
    $output .= l($year, $path);
    $output .= " (" . $year_count . ')';
    $items[] = $output;
    foreach($new_month_array[$year] as $month => $month_count){
      $output2 = '<div class="blog_date_row_month">';
      $output2 .= '- ';
      $path2 = $path . '-' . $month;
      if($date == ($year . '-' . $month)){
        $path = "blog/" . $uid;
        if($tid > 0){
          $path .= "/term/" . $tid;
        }
        $output2 .= l('(-) ', $path, array(
          'attributes' => array(
            'title' => 'View blogs for all dates'
          )
        ));
      }
      $output2 .= l(date("M", mktime(0, 0, 0, $month, 10)), $path2);
      $output2 .= ' (' . $month_count . ')';
      $output2 .= '</div>';
      $items[] = $output2;
    }
  }
  if($counter == 0){
    $output = "<div class='blog_no_match'>No matching dates.<div/>";
    $items[] = $output;
  }
  return $items;
}

/**
 * Menu callback; displays a Drupal page containing recent blog entries of all users.
 * Overrides blog_page_last() to add zebra classes
 */
function scratchpads_blog_page_last(){
  global $user;
  $build = array();
  $query = db_select('node', 'n')->extend('PagerDefault');
  $nids = $query->fields('n', array(
    'nid',
    'sticky',
    'created'
  ))->condition('type', 'blog')->condition('status', 1)->orderBy('sticky', 'DESC')->orderBy('created', 'DESC')->limit(variable_get('default_nodes_main', 10))->addTag('node_access')->execute()->fetchCol();
  if(!empty($nids)){
    $nodes = node_load_multiple($nids);
    $build += node_view_multiple($nodes);
    $c = 1;
    foreach(element_children($build['nodes']) as $key){
      if($c % 2){
        $build['nodes'][$key]['#prefix'] = '<div class="search-row-odd">';
        $build['nodes'][$key]['#suffix'] = '</div>';
      }
      $c++;
    }
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5
    );
  }else{
    drupal_set_message(t('No blog entries have been created.'));
  }
  drupal_add_feed('blog/feed', t('RSS - blogs'));
  return $build;
}

/**
 * Menu callback; displays a Drupal page containing recent blog entries of a given user.
 * Overrides blog_page_user() to add zebra classes, change title and add filter text
 */
function scratchpads_blog_page_user($account){
  global $user;
  if($user->uid == $account->uid){
    drupal_set_title($title = t("My Blog"));
    $sub_title = '';
  }else{
    drupal_set_title($title = t("Blog"));
    $sub_title = t("Filtered on Author (@name)", array(
      '@name' => format_username($account)
    ));
  }
  $build = array();
  $query = db_select('node', 'n')->extend('PagerDefault');
  $nids = $query->fields('n', array(
    'nid',
    'sticky',
    'created'
  ))->condition('type', 'blog')->condition('uid', $account->uid)->condition('status', 1)->orderBy('sticky', 'DESC')->orderBy('created', 'DESC')->limit(variable_get('default_nodes_main', 10))->addTag('node_access')->execute()->fetchCol();
  if(!empty($nids)){
    $nodes = node_load_multiple($nids);
    $build += node_view_multiple($nodes);
    $c = 1;
    foreach(element_children($build['nodes']) as $key){
      if($c % 2){
        $build['nodes'][$key]['#prefix'] = '<div class="search-row-odd">';
        $build['nodes'][$key]['#suffix'] = '</div>';
      }
      $c++;
    }
    $build['pager'] = array(
      '#theme' => 'pager',
      '#weight' => 5
    );
    if($sub_title != ''){
      array_unshift($build, array(
        '#markup' => "<h2 class='blog_filter_text'>" . $sub_title . "</h2>"
      ));
    }
  }else{
    if($account->uid == $user->uid){
      drupal_set_message(t('You have not created any blog entries.'));
    }else{
      drupal_set_message(t('!author has not created any blog entries.', array(
        '!author' => theme('username', array(
          'account' => $account
        ))
      )));
    }
  }
  drupal_add_feed('blog/' . $account->uid . '/feed', t('RSS - !title', array(
    '!title' => $title
  )));
  return $build;
}

