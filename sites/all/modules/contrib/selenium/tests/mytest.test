<?php


/**
 * @file
 * 
 */

if (!class_exists('DrupalSeleniumWebTestCase')) {
  drupal_set_message(t('Selenium tests are not displayed because the selenium module is not enabled.'), 'warning', FALSE);
  return;
}

class MyTestTestCase extends DrupalSeleniumWebTestCase {
  
  protected $profile = 'scratchpad_2';
  protected $test_user;
  
  public static function getInfo() {
    return array(
      'name' => 'My Test',
      'description' => 'Test selenium on the scratchpads profile with include',
      'group' => 'Selenium',
      'browsers' => array('firefox'),
    );
  }

  
  protected function setUp() {
 
    $modules = array();
    $modules = 'scratchpads_tweaks';
    
    include DRUPAL_ROOT . '/' . drupal_get_path('module', 'scratchpads_tweaks') . "/scratchpads_tweaks.inc";
 
       
    $browser = 'firefox';
    if (in_array($this->browser, $this->allowed_browsers)) {
      $browser = $this->browser;
    }
    $this->driver = $this->seleniumDriver($browser);
    // Determine whether we should run on Simpletest sandbox or original site.
    if ($this->onOriginal) {
      // Unset database prefix to run all tests on the original site.
      // It is a workaround to make it possible to run Selenium-tests via
      // browsers, that don't support user-agent setting.
      // @see http://drupal.org/node/1874076
      // 0) Preparations: initialize the helper variables.
      $this->sandboxDatabasePrefix = $this->databasePrefix;
      $this->originalDatabasePrefix = NULL;
      // 1) First create a backup of sandbox connection to make it possible to switch back later.
      Database::renameConnection('default', 'simpletest_sandbox');
      $connection_info = Database::getConnectionInfo('simpletest_sandbox');
      Database::addConnectionInfo('default', 'default', $connection_info['default']);
      // 2) Switch connection to original site.
      $this->switchConnectionTo('simpletest_original_default');
    }
    // Login user and accept legal 
 //   $this->test_user = $this->drupalCreateUser(array('administer nodes', 'bypass node access', 'administer content types'));    
  //  legal_save_accept(1, 1, 'en', $this->test_user->uid);
    
  }
  

  /**
   * Login with current user.
   */
  protected function drupalLogin($user){
    if($this->loggedInUser){
      $this->drupalLogout();
    }
    $this->drupalGet('user');
    $this->driver->getElement('css=#edit-name')->sendKeys($user->name);
    $this->driver->getElement('css=#edit-pass')->sendKeys($user->pass_raw);
    $this->driver->getElement('css=#edit-submit')->submit();
    // If a "log out" link appears on the page, it is almost certainly because
    // the login was successful.
    $pass = $this->assertText('Member for', 'User successfully logged in');
    
    if($pass){
      $this->loggedInUser = $user;
    }
  }
  
  
  function testBasic() {
   
    $user = $this->drupalCreateUser(array(
      'access content',
      'access administration pages',
      'administer site configuration',
      'administer users',
      'administer permissions',
      'administer content types',
      'administer nodes',
      'bypass node access',
      'access overlay',
      'access content overview',
      'view the administration theme',
      'access all views',
      'access toolbar'
    ));
    
    
      
  //  dpm($this->databasePrefix);
   // dpm($this->originalDatabasePrefix);
   // dpm($this->sandboxDatabasePrefix);
    
    legal_save_accept(1, 1, 'en', $user->uid);
    $this->drupalLogin($user);
    
   // $this_connection_info = Database::getConnectionInfo('default');
   // dpm($this_connection_info);
    
    $this->verboseScreenshot();
    $this->driver->getElement('css=#toolbar-home li a')->click();
    $this->verboseScreenshot();
    
 //  $this_connection_info = Database::getConnectionInfo('default');
 //   dpm($this_connection_info);
    
    
    
  //  $node = $this->drupalCreateNode(array('type' => 'page'));
  //  $this->drupalGet('node/' . $node->nid);
    
    
    
   
    

  }
}
